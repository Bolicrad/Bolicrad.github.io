{"pages":[{"title":"Hello, I&#39;m Lei, a.k.a. Bolicrad.","text":"Developers, developers, developers… Who am I?I’m a game developer. No matter which role I performed in a game project, no matter how I get involved in the game project, no matter whether I code or not in the game project, I’m firstly a game developer. I’m currently pursuing a master’s degree in game engineering at the University of Utah’s Entertainment Arts and Engineering, a fantastic video games graduate programs. I create video games with many other talented designers, engineers, and artists here. I got my bachelor’s degree at the University of Science and Technology of China (USTC), one of the top-tier researching institutes in China. The department I graduated from, the Department of Science and Technology Communication, helped me build a solid knowledge base of media research, media production, and media management. In 1997, I was born in Xi’an, China. This 3000 year historical capital city provides me with a sensitivity of history, geography, and civilization. I’m always curious about the natural and cultural specifications of every location I moved to, and can usually become a master of the time and space structure of that region, just as the locals. What’s my role in game development? Engineer: I work with various game engines. Unity, Unreal, Cocos Creator, Monogame, GameMaker, etc. Technology would never become a gap between me and fancy gameplays. Designer: I usually do the design works in collaboration, provide fancy ideas at the pre-production phase of game projects. Solo Game Developer: Why not sometimes make tiny games without a team? Though I still need to get access of free art assets. What if I want to do both?I can never find a better term to describe me other than “Technical Game Designer.” I always feel excited when I find some excellent new tools that might help build innovative gameplays. I’ll always think about: Can I integrate this new tool into my current game projects? Could I find the best candidate to use this tool to create fancy content? Will it enhance the workflow to reduce unnecessary repeating works? If it has some weakness, can I refine it by modifying its source codes? Then I’d take steps to research, implement, apply, and refine those new tools. This cycle could help me in building game creation tools from designer’s need. I feel happy when supporting aowsome game designers and cooperate closely with developers and artists. I understand that such position is still not abundant in the industry, so I’m also developing my design skill trees, with gameplay programming practices. If you are looking for a gameplay programmer or game designer, I’m still confident to be a candidate. To Artists, Social Workers, and Scientists:Sometimes I cooperate with people who aren’t familiar with game creation, such as artists, musicians, social workers, or scientists. I utilize my technologies and methodogies of games to help them convey the experiences they wish, to the audience. I can cooperate with you if you’re: An artist: You have fancy interactive ideas but lack an experienced developer to cooperate with; A social worker: You have a story about vulnerable groups to tell, but worrying about not being able to reach to audience in traditional media; A scientist: You want to show your science researches or popularize some science concepts to the public, to improve public understanding of science. I have a full skill set to help you create interactive projects, game or non-game, for your purpose. You can call those projects “Serious Games” as you wish, though I don’t really like this term. My undergraduate direction was mass communication for science topics, and I have several such cross-disciplinary practices on file. My favorite Game:While the top 3 for me connot jump out from the Legend of Zelda series, I would say the No.1 is Majora’s Mask. This game is an unrepeatable masterpiece, as it reused the assets of Ocarina of Time, after the “boy meets girl, knight saves princess” story, and finally created such a creepy, romantic experience, that lively creatures struggling for thier own lives in the endless three day cycle before the strange world being destroyed. All thier stories could be weaved together, to build up a unforgettable, unique memory for player itself. Thank You for ReadingI hope you can learn some aspects of me from those words. Please also check my portfolio and resume. Once again, I’m Lei, do not hesitate to contact me if you are interested. Not only for recruiting and cooperation, but you’re also welcome to discuss many topics about or not about games with me. Besides being a game developer and a hardcore gamer, I’m also a hobbyist in the railway system, snowboarding, urban planning, regional development, geopolitics, urban legends, etc. My Recent Photo Use Bolicrad to refer me on the Internet; use Lei to contact me in person.","link":"/about/index.html"},{"title":"Resume","text":"","link":"/resume/index.html"},{"title":"Portfolio","text":"1. Major Projectsa) Vacuum War.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } Role: Technical Designer &amp; Hardware Engineer Period: Janurary 2022 - Present Engine: Unity (Oculous VR); Arduino for hardwares. Special: EAE Project I course project (semster-long; Alt Control) This project is a currently a coursework under the topic of “Alternative Controllers”. The Idea comes from the switchable heads of cleaning vacuums. Main Gameplay is that you use physical vacuum gun and shoot in the VR space, with sometimes sucking ammos with another head. I majorly work on the hardware part, about the head detection, wireless communication, and glue codes on the game side. A team of 12 has made efforts on this game in this spring, and finally crafted a immersive and attractive virtual room. b) ReTrieve.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } Role: Gameplay Programmer &amp; Level Designer Period: July 2019 - November 2019 Engine: Unity Specical: Won Tencent 2019 Next Idea Excellence Award (Top 16) This project is a 2D platformer game where players could explore multiple themed worlds, using swords and elementary magics to fight against various bosses. I worked on this title for about 4 months with a team of 5,i ncluding another programmer and 3 artists. I mainly focused on the design and programming work of enemy AI and Boss Fights. I also instructed the artist team to create the tilemap, designed the level blocks in the 3.0 version, and coded for the level random generating algorithms. ReTrieve by MCATIN, 419152731, Bolicrad, Daemonn See more details in this Dev Story post. c) Project Haiku .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } Role: Game Designer &amp; Programmer Period: October 2020 - December 2020; April 2021 - May 2021 Engine: Cocos Creator, Agora, WebAudio Special: First performed at Beijing 798 Art Zone. Sponsored by Goethe Institute Beijing. This project is an interactive music performance experience. I cooperated with musician and artist Clore Cai and tried to provide a space for the audience to contribute to the sound field through their new organ: the smartphone. I used Cocos Creator to create a juicy user interface based on Html5. I utilized WebAudio to make it possible for the players to generate and modify the music from their smartphones. I also programmed for the client-master communication features using the chatroom framework by Agora to help musicians and VJ to adjust their theme according to the audience’s state and the whole sound field. Try the live demo on gitee.io2. Shipped Titlesa) Bouncy Strike Role: Gameplay Programmer Period: December 2020 - April 2021 Engine: Cocos Creator This game was the main project when I worked at Tantrum Network. I took all programming works of this game from scratch, including the main gameplay, data structure of heroes and enemies, UI framework, animation pipeline, data automation, etc. The basic gameplay is to launch the charaters as billiard balls, to strike on enemies with damages. The IP owner later polished and published it on iOS, with advertisment systems integrated, but the core gameplay and animation systems retains as when I left this project. b) Liar’s Dice Applet Game Role: Gameplay Programmer Period: Feburary 2020 - May 2020 Engine: Cocos Creator This game is a contract work from an individual who wanted to bring the experience of Liar’s Dice to virtual, at the time when covid breakout made it impossible to gather together in the bar. I systematically learned the rule of the Liar’s Dice game, then made it digital with my artist cooperator Chuxian Wang. The core programming problem is online communication, and finally I utilized a cloud FaaS framework provided by WeChat, with which I could create sessions for the online play without any server-end codes. Try the live demo in Wechat by scanning this QR code (Chinese version only) 3. “Experimental Gameplay” courseworksa) Route of Industilization Role: Solo Game Developer Period: One week in Janurary 2022 Engine: Unity This game is the first cousework of the “Experimental Gameplay” course, with the theme “Futurism”. I tried to develop a jump system in a 2d platformer setting, majorly because I want to learn the creation of a 2d platformer character, including its coding, as well as the animator state machine and the animations by frame. Character part in the ReTrieve project is mainly developed by my friend Daemon Pan, so I still want to discover my potential to finish such a game by myself. The double jump mechanic is well profiled and it’s nice to have a try. The scoring of this game somehow refelcts the modern China history. Route of Industrialization by Bolicradar b) Stinky Snake Role: Solo Game Developer Period: Februray 1st 2022 Engine: Unity Special: EXTREMELY STINKY. You will like it. Third coursework of the “Experimental Gameplay” course, with the theme “Legacy Game”, which means you need to leave some eternal change to the game space across multiple game sessions. This title rethinks the relationship between we human and the influence we made to the environment, and tried to explore what potential effects the “eternal legacy” would provide to us, in an irony way. Developed in exactly one day and have just art/audio assets outsourced. Stinky Snake by Bolicradar c) True Fisrt Person Demo in Unreal Role: Solo Developer Period: Feburay 8th 2022 Engine: Unreal This tech demo is a cousework of the “Experimental Gameplay” Course. The theme “Melodramtic” inspired me to create an experience that players are in true first person vision, to take a shower and cleaning body. Alothough the gameplay was not made in any speaking, at least I tried to made the camera binded to the head of the avatars’ skeleton, and created the control of the avatar’s neck and head with mouse, seperate with the control of movement. I majorly referenced this article, using aim offset system in unreal, but also profiled the function and removed the necessity of C++ codes. It works perfectly with just Blueprint. The potential of this system in gameplay is to enhance the sense of existence of yourself in the world, but also have distinct experience with normal FPS and VR games. In multiplayer games, players can see each others neck move fluently, which is absolutely a novel experience. Updated playables will be posted here after final debug &amp; build.d) Fruit Bar Role: Solo Game Developer Period: One Week in late Februray 2022 Engine: Cocos Creater Sixth coursework of the “Experimental Gameplay” course, with the theme “Match-3 with Twisted Gameplay”. As match-3 is majorly ditrbuted on smart phones, I chose cocos creater to create more mobile friendly experience. The twist on traditional match-3 gameplay is “Rotation”, as you can see in the video. When you use a mobile device to play this game, the direction friuts falling down will change if you rotate your device. With this new mechanic, you can even rotate the game in certain timing to achieve higher combos. It become popular in some of my friends and should be a novel experience. Fruit Bar by Bolicradar 4. Tech Demos &amp; Prototypesa) Crow Platformer Demo Role: Gameplay Programmer Period: Summer 2022 Engine: Cocos Creator (for HTML5 export Only) Special: Made detailed researh on Spine and Web Gamepad API This tech demo is a new tryout for providing more precise charater controll system on the web platform for platformer games. With the Web Gamepad API, players can control the crow with any gamepad they have, with analog input from the joystick. It also revealed a cross platform game developing potential as we can pack the web game with Electron or Tauri for PC/Mac without losing controller support. CrowCrow by Bolicradar b) Tele-Rang Role: Technical Designer and Gameplay Programmer Period: 2 Weeks, August 2021- September 2021 Engine: Monogame Special: First Prototype in EAE Rapid Prototype Course, Ranked Top 3 in peer voting. This prototype was required to design around a toy boomerang (toy varies among teams). I researched the engines that was allowed and made decision for the team to use Monogame. I explored and inplemented the Monogame.Extended library to the project files, and helped the programmer to finish many features such as animation state machine, movement algorithm, game cycle logics. I also helped producer in pitching for operating the live demo because I was the only one in the team who could pass the hard level. Check out project files on Google Drivec) Inky_Stone Role: Solo Developer Period: Two weeks in November 2019 Engine: Cocos Creator This tech demo is a part of my work result in Dr.Stone Popular Science Studio. The students in earth and space science intended to make some physics-based minigames by themselves with cocos creator, and wanted to add a framework to for science-themed interactive dialouges. So I imported the ink.js library to the cocos proejct, and made a tech demo to excute the file exported from the inky editor, to empower the game team to create fun choices and questions. Inky_Stone by Bolicradar d) Interactive Comic Framework Role: Solo Developer Period: One week in Janurary 2021 Engine: Cocos Creator This tech demo is a part of my work result at Tantrum Network. Liangzhu was an interactive comic originated from an artist’s student-era project made with Unity, and this start-up company wanted to port this project to a platform only support web-version game files. I then researched and developed the warping codes to directly import the psd files with certain layer hierarchy into cocos creator’s object hierarchy, and transform them into working interactable comic automaticly. Based on the Baum.js Photoshop plugin and Baum2CocosCreator library. Also added motion frames and interactable choices. Try the live demo on gitee.io5. Legacy Projectsa) Heist-N-Heat Infinite Role: UI Developer &amp; Producer Period: November 2021 - December 2021 Engine: Unreal (UMG/Blueprint) Special: My final project in the MEAE Rapid Prototype Course. This project is an race game that players drives a crazy car in the cit collecting treasure and fuel, avoiding the cop’s chase. The highlight is that we have the twitch integration that twitch watcher could use command to produce obstacle or boosters for the player when streaming. I joined the project in the mid-phase and took over the UI function remake, 2D/UI art asset management, as well as technology research works on twitch API. Heist N' Heat: Infinite by Foursay b) Grassland Guardian Role: Solo Game Developer Period: Originated in May 2019, developed from December 2019 to June 2020 Engine: Unity (Original Prototype) &amp; Cocos Creator (Publish Version) Special: Serious Game connected with my thesis project for bachelor’s degree This game originated in a hackathon intended to help an NGO enhance its public communication. The NGO has worked on grassland protection and fought against desertification for several years in Northeastern China. I brought up a serious game plan to show their difficulty and finished a prototype within 24 hours. Later, I remade this project into an applet-based game and completed my thesis based on this game’s development process and communication effect research. Grassland Guardian by Bolicradar c) Trick.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } Role: Game Designer &amp; Gameplay programmer Period: a Week in Janurary 2019 Engine: Unity Special: My first game prototype cooperated with experienced teammates. This prototype is my fisrt piece of work in video game, cooperated with two other experienced programmers and three student artists. For design, I brought up the idea of asymmetric local multiplayer, that one player control the hero with keyboard and the other control the demon king with mouse to trigger the traps. For engineering, I focused on the algorithm of the traps’ movement and enemies’ logic (especially the creppy flies). I also finished half of the level design, by creating level prefab with the object brush provided by my teammate. Trick by Bolicrad, MKK.kkkk, hch12hhh, BloodyOrchidDC, Hikari cat d) Trash Truck Role: Solo Game Developer Period: March-May 2019 Engine: Unity Special: Serious Game, won my undergraduate university’s Energy Saving creation award. This is a serious game themed on trash categorizing and recycling, intended to educate kids to learn how to throw the trash into correct kind of trashcan to help the socitey to deal with recycling better. Created with Unity Playground. Trash Truck by Bolicrad","link":"/portfolio/index.html"}],"posts":[{"title":"Retrieve Dev Story","text":"This game was originated in a 7-day game dev camp in late July 2019. I can still remember that summer when I was still a curious, passionate, and enthusiastic rookie game developer, full of creativity. I didn’t have much experience in game programming at that time. But actually, that’s why I dare to take the role of “Programmer” of a game dev camp: not realizing how hard it is to become a real game engineer in the industry. Ver. 0.1: Born from a wishMy teammates are mainly hardcore gamers. We admired our game experience in childhood, missed the feeling of taking an adventure in the delicate pixel worlds, and wished to bring such sense to modern gamers. That’s the motivation for our first design decision: making a 2D pixel-styled platformer adventure game. During the week, I was focused on coding for the camera following mechanic (later solved by Unity plugin Cinemachine), implementing controller input frameworks, learning how to code for the bosses’ AI (with handwritten state machine), and preparing slides for pitching in the midnight before the due. It was the first time I felt like I was burned out in game development. Unfortunately, developing a platformer game is not as simple as playing Super Mario Bros. Our product after the week was not so ideal that I once believed it was the final form. The team should separate and keep walking on each one’s path. For a summer session, I took a flight from Beijing to Shanghai, then to Irvine, California. But before we went, my friend Daemon Pan and I decided to submit it to the Tencent Competition. This decision finally gave our project a possibility to be retrieved. Ver. 0.2: Rush, Game Developers!When it was near the end of my summer school in UCI, A good news came out to me: Retrieve, the demo we submitted to Tencent, passed the first round filtering and entered the second round competition. I canceled all my previous schedules after flying back to China. Then in late August, the second day after I went back to China, I immediately rushed to Hangzhou, where we decided to gather again. This round we reconstructed the whole project: Art: Our artists’ productivity cannot support keeping the pre-painted level arts, so we shifted into Tiled Map. I integrated the unity 2d tilemap expansion into our project, then learned the rules of how tilemap distributes, instructed the art team to develop our first set of tiles. Design: I decided to utilize a Zelda approach to design the whole level structure of the game. We set 3 different themed sub-worlds. Each has a boss at the end of the level. After collecting three gems from 3 worlds, the secret portal to the final boss would open in the central room. Code: My handwritten state machine is not stable enough for AIs, and it was frustrating when I wanted to create some cross-frame logic. Thus a replaced the AI framework into a coroutine-based system, inspired by a blog from Jean Simonet. I then made 9 different kinds of regular enemies AI under the new framework and reconstructed all the 5 bosses’ AI. The efficiency was totally different. The development strength was extreme in this phase: Our work hour was usually extended to 3-4 am, with no rest on weekends. I celebrated my 22nd birthday in the hotel and turned back into development after finishing the cake. The word label on the corner of the cake said: “Wish you can win a reward!”. Such kind of work style made 2 of our artists exit the project after this phase. Later in the middle of September, Daemon and I finished the second version of Retrieve on the attic of his home. Ver. 0.3: From a demo into a game5 days before October 2019, we were informed that we entered the third round of the competition, which means no more than 15 other teams are competing with us. Meanwhile, we could foresee that this would probably be our last version because other teams were hardworking, and we weren’t the most talented or experienced. This situation led us to one last design decision: Make it a game with complete structure, user interface, and storytelling elements. We gathered in Hangzhou again before October 1, 2019, which should have been a week-long holiday. Luckily, a new artist Chuxian joined us and helped us reproduce 4 sets of more exquisite tiles. In this phase, I have done the following works: Art: I again instructed the new artist about creating a tiled map, such as determining which side of the block should be continuous and which side should be unique. Under this rule, we even rebuilt the moving platform assets and evolved our art style from 8-bit into 16 bit. Design: In this cycle, I decided to add some Roguelike elements to the levels before the boss room: We don’t want to make it Cuphead-like. I designed several “level Chunks” and randomly combined those prefabs into a whole level. That inherits the idea of how Spelunky generates its level. Code: I coded for the level generate system mentioned before and worked on the cutscene manga system, which gives this game a narrative—the rest of the time to debug or work on minor systems. As we predicted, the game was not able to enter the top 6. But Later, we were still be issued an excellence award, the proof of the Top 16 of this year. Because we all had to start preparing the application for the master’s program in November, the development was stopped. I was so proud of the product we created and appreciated everyone who devoted to this project. Finally, we had a game like this:.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } Postmorterm from 2021I recently downloaded it from itch.io, to play the game again and write something for this new portfolio site. I found some obvious weakness, form both player and developer’s perspective: 1. The jumping action was poor designed.I cannot remember clearly how this fuction was crafted, but jumping in this game is not powerful, but sometimes frustrating. We have many platforms that the player need to use double jump, but actually the character itself cannot jump twice after once performed wall-jump. It is a bug in design that we did not provide such affordance, but most players have this instinct from their experience in SMB or Celeste. We should have consider this and do some special coding in profile. 2. The Level-size/player-size ratio was too small.The level chunks I created in the 0.3 version was not well tested. Some paths are only 3-block high, but our character have 2 block size. Considering better user experience, we should have made the level scale at least twice larger. The path from the start to the end of a paticular level was too long, either. The level generating principle was still cool, but specific data settings should be reconsidered. 3. The sword attack was weakened too much.At the time we made the decision to make combining 4 elements into 10 magics, we were thinking about making this new feature the main way to defeat most enemies. But according to my recent test, this change made it impossible for regular-leveled players to beat up the bosses. We need to reconsider the system balancing. 4. The Tiled Map has tiny seams among each block.Minor tech error on rendering, but must have some way to solve. To conclude, I have to say, as my fisrt completed game project, though Retrieve has a lot of design defects and engineering problems, it’s still means a lot to me, and have the potential to be refined, or remastered in the future.Download from itch.io","link":"/post/Retrieve/"},{"title":"How to Use an iPad as the Only Display of Mac Mini","text":"We all know that Apple provided a feature called Sidecar. In the recent macOs Monterey, the the pane ‘Sidecar’ disappeared from System Preference App. Actually this feature is still availble through the pane “Display”. This article is not to instruct you how to open the sidercar step by step, but to provide a new stable way to automatically open it every time when you open your mac, then for mac mini users who only want to display mac on iPads, your dream could come true. Stop buzzling, show me the code!AutoSidecar12345678910111213141516171819tell application &quot;System Preferences&quot; activate delay 0.5 set the current pane to pane id &quot;com.apple.preference.displays&quot; beep 1 delay 2 tell application &quot;System Events&quot; tell process &quot;System Preferences&quot; tell first window tell first pop up button click click menu item &quot;name_of_the_iPad&quot; of menu 1 -- replace &quot;name_of_the_iPad&quot; into your iPad name end tell end tell end tell end tell quitend tell","link":"/post/MacMiniAutoSidecar/"}],"tags":[{"name":"Game","slug":"Game","link":"/tags/Game/"},{"name":"Tech","slug":"Tech","link":"/tags/Tech/"},{"name":"macOS","slug":"macOS","link":"/tags/macOS/"}],"categories":[{"name":"Portfolio","slug":"Portfolio","link":"/categories/Portfolio/"}]}